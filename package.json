{
  "name": "core-promise",
  "description": "An ES6 and Promises/A+ 1.1 fully compliant Promise implementation, that works on IE8+",
  "author": [
    {
      "name": "Bogdan Mustiata",
      "email": "bogdan.mustiata@gmail.com"
    }
  ],
  "version": "0.2.1",
  "dependencies": {},
  "devDependencies": {
    "es5-shim": "^4.1.7",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-typescript": "^0.6.2",
    "promises-aplus-tests": "^2.1.0",
    "promises-es6-tests": "^0.5.0"
  },
  "keywords": [
    "promise",
    "fast",
    "IE8",
    "ES6"
  ],
  "main": "./lib/core-promise.js",
  "bugs": {
    "url": "https://github.com/bmustiata/core-promise/issues"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/bmustiata/core-promise/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bmustiata/core-promise.git"
  },
  "readme": "# core-promise\nA promise implementation that is fully conformant to the [Promises/A+ spec](https://github.com/promises-aplus/promises-spec),\npassing all the 872 tests from the [reference tests](https://github.com/promises-aplus/promises-tests).\nComes with full TypeScript support.\nAnd works from IE8+ without any dependency. (`bower install core-promise`)\nOn IE9 only 2 tests are failing (for strict functions the this comes as the `window` object\ninstead of `undefined` - this is a browser bug).\nOn IE8 multiple tests are failing due to the way the tests themselves are written\n(calling `Object.create`, using properties, etc. that the shims are not implementing fully).\nNote that the implementation of `CorePromise` itself is compield in pure ES3 JavaScript, and doesn't need\n*any* polyfill, and is literally the tests implementation that fails, and not `core-promise` itself.\n## IE8, IE9.. Usage\nFirst you will need to fetch the implementation of the promises via bower:\n```\nbower install core-promise\n```\nJust include it in the `<head>` of your page a reference to the core-promise js file:\n```html\n<head>\n  <!-- the file is standalone, and has no dependencies -->\n  <script type=\"text/javascript\" src=\"core-promise.js\"/>\n</head>\n```\n## Usage in Node\nThe recommended way to use the `core-promise` is to use the Promise class, that\nwill use the native Promise class if it is available (e.g. from node 0.12 up).\n```javascript\nvar Promise = require('core-promise').Promise,\n    CorePromise = require('core-promise').CorePromise;\n// ..\n// Create new promises with:\nvar p = new Promise(function(fulfill, reject)) {\n    //..\n};\n```\n## Node with TypeScript\nIf you use TypeScript, then you should know that the core-promise bundles\nthe definition file inside the module. So in order for you to get autocomplete,\nerror checking etc, just add a reference to it, like so: \n```typescript\n/// <reference path=\"node_modules/core-promise/core-promise.d.ts\"/>\nimport core = require(\"core-promise\");\nimport Promise = core.Promise;\nPromise.resolve(\"core-promise\")\n    .then((x : number) => { // compile error, resolve returns a string\n        console.log(x);\n    });\n```\n## ChangeLog\n* 2015-07-02 v0.2.1 *BugFix* Added d.ts module file. Recompiled bower client.\n* 2015-07-01 v0.2.0 ES6 compatible functions added (resolve, all, race, reject).\n* 2015-06-30 v0.1.3 Documentation.\n* 2015-06-30 v0.1.2 *BugFix* `setTimeout` call it via `()` not `.call` for IE8\n* 2015-06-30 v0.1.1 Browserify browser tests via mocha.\n* 2015-06-30 v0.1.0 Promises/A+ 1.1 compatible.\n",
  "readmeFilename": "README.md",
  "homepage": "http://blog.ciplogic.com"
}
